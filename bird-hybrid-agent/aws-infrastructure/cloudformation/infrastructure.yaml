AWSTemplateFormatVersion: '2010-09-09'
Description: 'UrbanHub Bird.com Hybrid AI Infrastructure - Complete Serverless Stack'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name for resource naming and configuration
  
  AnthropicApiKey:
    Type: String
    NoEcho: true
    Description: Anthropic Claude API key for AI processing
  
  BirdWebhookSecret:
    Type: String
    NoEcho: true
    Description: Bird.com webhook signing secret for HMAC validation
  
  WhatsAppBusinessToken:
    Type: String
    NoEcho: true
    Description: WhatsApp Business API access token

Resources:
  # ============================================
  # IAM ROLES AND POLICIES
  # ============================================
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'UrbanHub-${Environment}-LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BirdIntegrationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB access
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt ConversationTable.Arn
                  - !GetAtt AnalysisTable.Arn
                  - !GetAtt UserProfilesTable.Arn
              
              # S3 access for media storage
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${MediaStorageBucket}/*'
                  - !Sub '${ProcessedDataBucket}/*'
              
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Ref MediaStorageBucket
                  - !Ref ProcessedDataBucket
              
              # EventBridge access
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: 
                  - !GetAtt EventBridge.Arn
              
              # Textract access for document processing
              - Effect: Allow
                Action:
                  - textract:AnalyzeDocument
                  - textract:StartDocumentAnalysis
                  - textract:GetDocumentAnalysis
                Resource: '*'
              
              # Rekognition access for image processing
              - Effect: Allow
                Action:
                  - rekognition:DetectLabels
                  - rekognition:DetectText
                  - rekognition:DetectFaces
                  - rekognition:RecognizeCelebrities
                Resource: '*'
              
              # Transcribe access for voice processing
              - Effect: Allow
                Action:
                  - transcribe:StartTranscriptionJob
                  - transcribe:GetTranscriptionJob
                Resource: '*'
              
              # Polly access for voice synthesis
              - Effect: Allow
                Action:
                  - polly:SynthesizeSpeech
                Resource: '*'
              
              # Comprehend access for text analysis
              - Effect: Allow
                Action:
                  - comprehend:DetectEntities
                  - comprehend:DetectSentiment
                  - comprehend:DetectPiiEntities
                Resource: '*'
              
              # CloudWatch Logs access
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # ============================================
  # STORAGE INFRASTRUCTURE
  # ============================================
  
  ConversationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'UrbanHub-${Environment}-Conversations'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: conversation_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: conversation_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  AnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'UrbanHub-${Environment}-Analysis'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: conversation_id
          AttributeType: S
        - AttributeName: analysis_timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: conversation_id
          KeyType: HASH
        - AttributeName: analysis_timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  UserProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'UrbanHub-${Environment}-UserProfiles'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  MediaStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'urbanhub-${Environment}-media-storage'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: MediaArchivalRule
            Status: Enabled
            ExpirationInDays: 365
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
              - StorageClass: GLACIER
                TransitionInDays: 90
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  ProcessedDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'urbanhub-${Environment}-processed-data'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration

  # ============================================
  # EVENT INFRASTRUCTURE
  # ============================================
  
  EventBridge:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub 'UrbanHub-${Environment}-EventBus'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  # EventBridge Rules for routing
  OrchestratorRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBridge
      EventPattern:
        source: ["urbanhub.bird.webhook"]
        detail-type: ["Agent Routing Required"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt OrchestratorFunction.Arn
          Id: "OrchestratorTarget"
  
  ConversationAIRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EventBridge
      EventPattern:
        source: ["urbanhub.orchestrator"]
        detail-type: ["Route to Conversation AI"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt ConversationAIFunction.Arn
          Id: "ConversationAITarget"

  # ============================================
  # LAMBDA FUNCTIONS
  # ============================================
  
  WebhookProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'UrbanHub-${Environment}-WebhookProcessor'
      Runtime: python3.11
      Handler: handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          CONVERSATION_TABLE: !Ref ConversationTable
          ANALYSIS_TABLE: !Ref AnalysisTable
          EVENT_BUS_NAME: !Ref EventBridge
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          WEBHOOK_SECRET: !Ref BirdWebhookSecret
          MEDIA_BUCKET: !Ref MediaStorageBucket
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
      Code:
        ZipFile: |
          # Placeholder - replace with actual deployment package
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Deployment needed'}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  OrchestratorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'UrbanHub-${Environment}-Orchestrator'
      Runtime: python3.11
      Handler: orchestrator.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          CONVERSATION_TABLE: !Ref ConversationTable
          EVENT_BUS_NAME: !Ref EventBridge
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Orchestrator ready'}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  ConversationAIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'UrbanHub-${Environment}-ConversationAI'
      Runtime: python3.11
      Handler: conversation_ai.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 1024
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          CONVERSATION_TABLE: !Ref ConversationTable
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
          MEDIA_BUCKET: !Ref MediaStorageBucket
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'ConversationAI ready'}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  DocumentProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'UrbanHub-${Environment}-DocumentProcessor'
      Runtime: python3.11
      Handler: document_processor.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 300  # 5 minutes for document processing
      MemorySize: 2048
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          MEDIA_BUCKET: !Ref MediaStorageBucket
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'DocumentProcessor ready'}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  VisualAnalyzerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'UrbanHub-${Environment}-VisualAnalyzer'
      Runtime: python3.11
      Handler: visual_analyzer.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 180  # 3 minutes for image processing
      MemorySize: 1536
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          MEDIA_BUCKET: !Ref MediaStorageBucket
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'VisualAnalyzer ready'}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  VoiceAssistantFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'UrbanHub-${Environment}-VoiceAssistant'
      Runtime: python3.11
      Handler: voice_assistant.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 180  # 3 minutes for voice processing
      MemorySize: 1536
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          MEDIA_BUCKET: !Ref MediaStorageBucket
          PROCESSED_BUCKET: !Ref ProcessedDataBucket
          ANTHROPIC_API_KEY: !Ref AnthropicApiKey
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'VoiceAssistant ready'}
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration

  # ============================================
  # API GATEWAY
  # ============================================
  
  BirdWebhookAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'UrbanHub-${Environment}-BirdWebhookAPI'
      Description: API Gateway for Bird.com webhook processing
      EndpointConfiguration:
        Types:
          - REGIONAL
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration
  
  WebhookResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BirdWebhookAPI
      ParentId: !GetAtt BirdWebhookAPI.RootResourceId
      PathPart: webhook
  
  WebhookMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BirdWebhookAPI
      ResourceId: !Ref WebhookResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebhookProcessorFunction.Arn}/invocations'
  
  WebhookDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: WebhookMethod
    Properties:
      RestApiId: !Ref BirdWebhookAPI
      StageName: !Ref Environment
  
  # Lambda permissions for API Gateway
  WebhookLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebhookProcessorFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BirdWebhookAPI}/*/*'

  # EventBridge permissions for Lambda functions
  OrchestratorEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrchestratorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt OrchestratorRule.Arn
  
  ConversationAIEventPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ConversationAIFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ConversationAIRule.Arn

  # ============================================
  # MONITORING AND ALERTING
  # ============================================
  
  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub 'UrbanHub-${Environment}-BirdIntegration'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${WebhookProcessorFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Webhook Processor Metrics"
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "UrbanHub/BirdIntegration", "WebhookProcessed" ],
                  [ ".", "IntentClassified" ],
                  [ ".", "HighConfidenceClassification" ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Business Metrics"
              }
            }
          ]
        }
  
  # CloudWatch Alarms
  WebhookErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'UrbanHub-${Environment}-WebhookErrors'
      AlarmDescription: 'High error rate in webhook processing'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref WebhookProcessorFunction
      AlarmActions:
        - !Ref SNSAlarmTopic
  
  WebhookLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'UrbanHub-${Environment}-WebhookLatency'
      AlarmDescription: 'High latency in webhook processing'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000  # 10 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref WebhookProcessorFunction
      AlarmActions:
        - !Ref SNSAlarmTopic
  
  SNSAlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub 'UrbanHub-${Environment}-Alarms'
      DisplayName: 'UrbanHub Bird Integration Alarms'
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: UrbanHub-BirdIntegration

# ============================================
# OUTPUTS
# ============================================

Outputs:
  WebhookEndpointURL:
    Description: 'Bird.com Webhook Endpoint URL'
    Value: !Sub 'https://${BirdWebhookAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/webhook'
    Export:
      Name: !Sub '${AWS::StackName}-WebhookURL'
  
  ConversationTableName:
    Description: 'DynamoDB Conversation Table Name'
    Value: !Ref ConversationTable
    Export:
      Name: !Sub '${AWS::StackName}-ConversationTable'
  
  MediaStorageBucketName:
    Description: 'S3 Media Storage Bucket Name'
    Value: !Ref MediaStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-MediaBucket'
  
  EventBusName:
    Description: 'EventBridge Event Bus Name'
    Value: !Ref EventBridge
    Export:
      Name: !Sub '${AWS::StackName}-EventBus'
  
  CloudWatchDashboardURL:
    Description: 'CloudWatch Dashboard URL'
    Value: !Sub 'https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${CloudWatchDashboard}'
    Export:
      Name: !Sub '${AWS::StackName}-Dashboard'